{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.truncateAddress = exports.jsonRpcResponse = exports.decodeTransactionData = exports.unitMap = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _web3EthAbi = _interopRequireDefault(require(\"./web3EthAbi\"));\n\nvar _METHOD_LABELS, _ERC;\n\nvar unitMap = {\n  noether: '0',\n  wei: '1',\n  kwei: '1000',\n  Kwei: '1000',\n  babbage: '1000',\n  femtoether: '1000',\n  mwei: '1000000',\n  Mwei: '1000000',\n  lovelace: '1000000',\n  picoether: '1000000',\n  gwei: '1000000000',\n  Gwei: '1000000000',\n  shannon: '1000000000',\n  nanoether: '1000000000',\n  nano: '1000000000',\n  szabo: '1000000000000',\n  microether: '1000000000000',\n  micro: '1000000000000',\n  finney: '1000000000000000',\n  milliether: '1000000000000000',\n  milli: '1000000000000000',\n  ether: '1000000000000000000',\n  kether: '1000000000000000000000',\n  grand: '1000000000000000000000',\n  mether: '1000000000000000000000000',\n  gether: '1000000000000000000000000000',\n  tether: '1000000000000000000000000000000'\n};\nexports.unitMap = unitMap;\nvar TRANSFER_SIG = 'a9059cbb';\nvar APPROVE_SIG = '095ea7b3';\nvar TRANSFER_FROM_SIG = '23b872dd';\nvar METHOD_LABELS = (_METHOD_LABELS = {}, _METHOD_LABELS[TRANSFER_SIG] = 'Transfer', _METHOD_LABELS[APPROVE_SIG] = 'Approve', _METHOD_LABELS[TRANSFER_FROM_SIG] = 'Transfer From', _METHOD_LABELS);\nvar decodableContracts = {\n  ERC20: (_ERC = {}, _ERC[TRANSFER_SIG] = [// Transfer\n  {\n    type: 'address',\n    name: 'to'\n  }, {\n    type: 'uint256',\n    name: 'amount'\n  }], _ERC[APPROVE_SIG] = [// Approve\n  {\n    type: 'address',\n    name: 'spender'\n  }, {\n    type: 'uint256',\n    name: 'amount'\n  }], _ERC[TRANSFER_FROM_SIG] = [// transferFrom\n  {\n    type: 'address',\n    name: 'from'\n  }, {\n    type: 'address',\n    name: 'to'\n  }, {\n    type: 'uint256',\n    name: 'amount'\n  }], _ERC)\n};\n\nvar decodeTransactionData =\n/*#__PURE__*/\nfunction () {\n  var _ref = (0, _asyncToGenerator2.default)(\n  /*#__PURE__*/\n  _regenerator.default.mark(function _callee(txData) {\n    var methodSig, decodableContract, expectedParams, paramsData, params, paramKeys, cleanedParams;\n    return _regenerator.default.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            methodSig = txData.slice(2, 10);\n            decodableContract = Object.keys(decodableContracts).find(function (type) {\n              return !!decodableContracts[type][methodSig];\n            });\n\n            if (decodableContract) {\n              _context.next = 4;\n              break;\n            }\n\n            throw new Error(\"No decodable method found for \" + methodSig);\n\n          case 4:\n            expectedParams = decodableContracts[decodableContract][methodSig];\n            paramsData = txData.slice(10, txData.length);\n            params = _web3EthAbi.default.decodeParameters(expectedParams, paramsData);\n            paramKeys = Object.keys(expectedParams).map(function (k) {\n              return expectedParams[k].name;\n            });\n            cleanedParams = {};\n            Object.keys(params).forEach(function (k) {\n              if (paramKeys.includes(k)) {\n                cleanedParams[k] = params[k];\n              }\n            });\n            return _context.abrupt(\"return\", {\n              contractType: decodableContract,\n              signatureHex: methodSig,\n              signatureName: METHOD_LABELS[methodSig],\n              params: cleanedParams\n            });\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function decodeTransactionData(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexports.decodeTransactionData = decodeTransactionData;\n\nvar jsonRpcResponse = function jsonRpcResponse(result, id) {\n  return {\n    result: result,\n    id: id,\n    jsonrpc: '2.0',\n    error: null\n  };\n};\n\nexports.jsonRpcResponse = jsonRpcResponse;\n\nvar truncateAddress = function truncateAddress(address, endChars) {\n  if (endChars === void 0) {\n    endChars = 8;\n  }\n\n  if (address.length < endChars * 2 + 3) {\n    return address;\n  }\n\n  var start = address.substring(0, endChars);\n  var end = address.substring(address.length - endChars, address.length);\n  return start + '...' + end;\n};\n\nexports.truncateAddress = truncateAddress;","map":null,"metadata":{},"sourceType":"script"}