{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _web3EthAbi = _interopRequireDefault(require(\"../web3EthAbi\"));\n\nvar Contract =\n/*#__PURE__*/\nfunction () {\n  function Contract(ethClient, abi, address) {\n    (0, _defineProperty2.default)(this, \"_ethClient\", void 0);\n    (0, _defineProperty2.default)(this, \"_abi\", void 0);\n    (0, _defineProperty2.default)(this, \"_address\", void 0);\n    this._ethClient = ethClient;\n    this._address = address;\n    this._abi = abi;\n  }\n\n  var _proto = Contract.prototype;\n\n  _proto.getFunctionABI = function getFunctionABI(name) {\n    var abi = this.abi.find(function (a) {\n      return a.name === name;\n    });\n\n    if (!abi) {\n      throw new Error(\"\\\"\" + name + \"\\\" signature not found in ABI\");\n    }\n\n    return abi;\n  };\n\n  _proto.encodeCall = function encodeCall(name, params) {\n    var abi = this.getFunctionABI(name);\n    return _web3EthAbi.default.encodeFunctionCall(abi, params || []);\n  };\n\n  _proto.decodeCallResult = function decodeCallResult(name, result) {\n    var abi = this.getFunctionABI(name);\n\n    if (!abi.outputs.length) {\n      return result;\n    }\n\n    if (abi.outputs.length && !result) {\n      throw new Error('Expected outputs but none returned');\n    }\n\n    if (abi.outputs.length > 1) {\n      return _web3EthAbi.default.decodeParameters(abi.outputs, result);\n    }\n\n    return _web3EthAbi.default.decodeParameter(abi.outputs[0].type, result);\n  };\n\n  _proto.call =\n  /*#__PURE__*/\n  function () {\n    var _call = (0, _asyncToGenerator2.default)(\n    /*#__PURE__*/\n    _regenerator.default.mark(function _callee(method, params) {\n      var data, res;\n      return _regenerator.default.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              data = this.encodeCall(method, params);\n              _context.next = 3;\n              return this.ethClient.send('eth_call', [{\n                data: data,\n                to: this.address\n              }, 'latest']);\n\n            case 3:\n              res = _context.sent;\n              return _context.abrupt(\"return\", this.decodeCallResult(method, res));\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function call(_x, _x2) {\n      return _call.apply(this, arguments);\n    }\n\n    return call;\n  }();\n\n  _proto.send =\n  /*#__PURE__*/\n  function () {\n    var _send = (0, _asyncToGenerator2.default)(\n    /*#__PURE__*/\n    _regenerator.default.mark(function _callee2(method, params, options) {\n      var data, txParams;\n      return _regenerator.default.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              data = this.encodeCall(method, params);\n              txParams = (0, _extends2.default)({}, options, {\n                to: this.address,\n                data: data\n              });\n              return _context2.abrupt(\"return\", this.ethClient.sendAndListen(txParams));\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function send(_x3, _x4, _x5) {\n      return _send.apply(this, arguments);\n    }\n\n    return send;\n  }();\n\n  _proto.decodeEventLog = function decodeEventLog(eventName, log) {\n    var abi = this.abi.find(function (abi) {\n      return abi.type === 'event' && abi.name === eventName;\n    });\n\n    if (!abi) {\n      throw new Error(\"Event '\" + eventName + \"' not found in ABI\");\n    }\n\n    var inputs = [{\n      indexed: true,\n      name: 'signature',\n      type: 'string'\n    }].concat(abi.inputs);\n    return this.ethClient.decodeLog(log, inputs);\n  };\n\n  _proto.subscribeToEvents =\n  /*#__PURE__*/\n  function () {\n    var _subscribeToEvents = (0, _asyncToGenerator2.default)(\n    /*#__PURE__*/\n    _regenerator.default.mark(function _callee3(name, topics) {\n      var abi, encodedSig, params;\n      return _regenerator.default.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              if (this.ethClient.web3Provider.subscribe) {\n                _context3.next = 2;\n                break;\n              }\n\n              throw new Error('Subscriptions not supported');\n\n            case 2:\n              abi = this.abi.find(function (abi) {\n                return abi.type === 'event' && abi.name === name;\n              });\n\n              if (abi) {\n                _context3.next = 5;\n                break;\n              }\n\n              throw new Error(\"Event '\" + name + \"' not found in ABI\");\n\n            case 5:\n              encodedSig = _web3EthAbi.default.encodeEventSignature(abi);\n\n              if (topics) {\n                topics.unshift(encodedSig);\n              } else {\n                topics = [encodedSig];\n              }\n\n              params = [{\n                address: this.address,\n                topics: topics\n              }];\n              return _context3.abrupt(\"return\", this.ethClient.subscribe('logs', params));\n\n            case 9:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    function subscribeToEvents(_x6, _x7) {\n      return _subscribeToEvents.apply(this, arguments);\n    }\n\n    return subscribeToEvents;\n  }();\n\n  _proto.getPastEvents =\n  /*#__PURE__*/\n  function () {\n    var _getPastEvents = (0, _asyncToGenerator2.default)(\n    /*#__PURE__*/\n    _regenerator.default.mark(function _callee4(name, params) {\n      var abi, encodedSig, inputs, res, events;\n      return _regenerator.default.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              abi = this.abi.find(function (abi) {\n                return abi.type === 'event' && abi.name === name;\n              });\n\n              if (abi) {\n                _context4.next = 3;\n                break;\n              }\n\n              throw new Error(\"Event '\" + name + \"' not found in ABI\");\n\n            case 3:\n              encodedSig = _web3EthAbi.default.encodeEventSignature(abi);\n              inputs = [{\n                indexed: true,\n                name: 'signature',\n                type: 'string'\n              }].concat(abi.inputs);\n\n              if (params.topics) {\n                params.topics.unshift(encodedSig);\n              } else {\n                params.topics = [encodedSig];\n              }\n\n              params.address = this.address;\n              _context4.next = 9;\n              return this.ethClient.getPastEvents(params);\n\n            case 9:\n              res = _context4.sent;\n              events = [];\n              res.forEach(function (log) {\n                try {\n                  var event = _web3EthAbi.default.decodeLog(inputs, log.data, log.topics);\n\n                  events.push(event);\n                } catch (err) {\n                  // eslint-disable-next-line no-console\n                  console.warn('Error parsing event log: ', err);\n                }\n              });\n              return _context4.abrupt(\"return\", events);\n\n            case 13:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n\n    function getPastEvents(_x8, _x9) {\n      return _getPastEvents.apply(this, arguments);\n    }\n\n    return getPastEvents;\n  }();\n\n  (0, _createClass2.default)(Contract, [{\n    key: \"ethClient\",\n    get: function get() {\n      return this._ethClient;\n    }\n  }, {\n    key: \"abi\",\n    get: function get() {\n      return this._abi;\n    }\n  }, {\n    key: \"address\",\n    get: function get() {\n      return this._address;\n    }\n  }]);\n  return Contract;\n}();\n\nexports.default = Contract;","map":null,"metadata":{},"sourceType":"script"}