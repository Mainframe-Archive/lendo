{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = exports.NETWORKS = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _events = _interopRequireDefault(require(\"events\"));\n\nvar _web3Utils = require(\"web3-utils\");\n\nvar _web3Providers = require(\"web3-providers\");\n\nvar _ERC = _interopRequireDefault(require(\"./Contracts/ERC20\"));\n\nvar _BaseContract = _interopRequireDefault(require(\"./Contracts/BaseContract\"));\n\nvar _web3EthAbi = _interopRequireDefault(require(\"./web3EthAbi\"));\n\nvar NETWORKS = {\n  '1': 'mainnet',\n  '2': 'morden',\n  '3': 'ropsten',\n  '4': 'rinkeby',\n  '42': 'kovan',\n  ganache: 'ganache'\n};\nexports.NETWORKS = NETWORKS;\nvar wsOptions = {\n  timeout: 15000\n};\n\nvar EthClient =\n/*#__PURE__*/\nfunction (_EventEmitter) {\n  (0, _inheritsLoose2.default)(EthClient, _EventEmitter);\n\n  function EthClient(provider, walletProvider, subscriptions) {\n    var _this;\n\n    _this = _EventEmitter.call(this) || this;\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"_polling\", false);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"_networkName\", void 0);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"_networkID\", void 0);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"_web3Provider\", void 0);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"_subscriptions\", void 0);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"_walletProvider\", void 0);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"_requestCount\", 0);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"_contracts\", {});\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"_intervals\", {});\n\n    if (typeof provider === 'string') {\n      var url = new URL(provider);\n\n      if (url.protocol !== 'ws:' && url.protocol !== 'wss:') {\n        throw new Error('rpc url must be a websocket endpoint');\n      } // TODO: handle http endpoints\n\n\n      _this._web3Provider = new _web3Providers.WebsocketProvider(provider, wsOptions);\n    } else {\n      _this._web3Provider = provider;\n    }\n\n    _this._subscriptions = subscriptions;\n    _this._walletProvider = walletProvider;\n\n    _this.setup();\n\n    return _this;\n  }\n\n  var _proto = EthClient.prototype;\n\n  _proto.setNetworkID = function setNetworkID(id) {\n    if (id !== this._networkID) {\n      if (Number(id) > 10000) {\n        this._networkName = NETWORKS['ganache'];\n      } else {\n        this._networkName = NETWORKS[id] || 'Unknown network';\n      }\n\n      this._networkID = id;\n      this.emit('networkChanged', id);\n    }\n  };\n\n  _proto.setup =\n  /*#__PURE__*/\n  function () {\n    var _setup = (0, _asyncToGenerator2.default)(\n    /*#__PURE__*/\n    _regenerator.default.mark(function _callee() {\n      var _this2 = this;\n\n      var sub, _sub;\n\n      return _regenerator.default.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              this.fetchNetwork();\n\n              if (this._subscriptions) {\n                _context.next = 3;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 3:\n              if (!this._subscriptions.networkChanged) {\n                _context.next = 8;\n                break;\n              }\n\n              _context.next = 6;\n              return this._subscriptions.networkChanged();\n\n            case 6:\n              sub = _context.sent;\n              sub.subscribe(function (res) {\n                _this2.setNetworkID(res.networkID);\n              });\n\n            case 8:\n              if (!this._subscriptions.accountsChanged) {\n                _context.next = 13;\n                break;\n              }\n\n              _context.next = 11;\n              return this._subscriptions.accountsChanged();\n\n            case 11:\n              _sub = _context.sent;\n\n              _sub.subscribe(function (res) {\n                _this2.emit('accountsChanged', res.accounts);\n              });\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function setup() {\n      return _setup.apply(this, arguments);\n    }\n\n    return setup;\n  }();\n\n  _proto.fetchNetwork =\n  /*#__PURE__*/\n  function () {\n    var _fetchNetwork = (0, _asyncToGenerator2.default)(\n    /*#__PURE__*/\n    _regenerator.default.mark(function _callee2() {\n      var id;\n      return _regenerator.default.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this.send('net_version', []);\n\n            case 2:\n              id = _context2.sent;\n              this.setNetworkID(id);\n              return _context2.abrupt(\"return\", id);\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function fetchNetwork() {\n      return _fetchNetwork.apply(this, arguments);\n    }\n\n    return fetchNetwork;\n  }();\n\n  _proto.getAccounts =\n  /*#__PURE__*/\n  function () {\n    var _getAccounts = (0, _asyncToGenerator2.default)(\n    /*#__PURE__*/\n    _regenerator.default.mark(function _callee3() {\n      return _regenerator.default.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!(this._walletProvider != null)) {\n                _context3.next = 2;\n                break;\n              }\n\n              return _context3.abrupt(\"return\", this._walletProvider.getAccounts());\n\n            case 2:\n              throw new Error('No wallet provider found');\n\n            case 3:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    function getAccounts() {\n      return _getAccounts.apply(this, arguments);\n    }\n\n    return getAccounts;\n  }();\n\n  _proto.getETHBalance =\n  /*#__PURE__*/\n  function () {\n    var _getETHBalance = (0, _asyncToGenerator2.default)(\n    /*#__PURE__*/\n    _regenerator.default.mark(function _callee4(address) {\n      var res;\n      return _regenerator.default.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return this.send('eth_getBalance', [address, 'latest']);\n\n            case 2:\n              res = _context4.sent;\n              return _context4.abrupt(\"return\", (0, _web3Utils.fromWei)(res, 'ether'));\n\n            case 4:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n\n    function getETHBalance(_x) {\n      return _getETHBalance.apply(this, arguments);\n    }\n\n    return getETHBalance;\n  }();\n\n  _proto.getContract = function getContract(abi, address) {\n    if (this._contracts[address]) {\n      return this._contracts[address];\n    }\n\n    var contract = new _BaseContract.default(this, abi, address);\n    this._contracts[address] = contract;\n    return contract;\n  };\n\n  _proto.erc20Contract = function erc20Contract(address) {\n    if (this._contracts[address]) {\n      return this._contracts[address];\n    }\n\n    var contract = new _ERC.default(this, address);\n    this._contracts[address] = contract;\n    return contract;\n  } // Logs\n  ;\n\n  _proto.getPastEvents =\n  /*#__PURE__*/\n  function () {\n    var _getPastEvents = (0, _asyncToGenerator2.default)(\n    /*#__PURE__*/\n    _regenerator.default.mark(function _callee5(params) {\n      var res;\n      return _regenerator.default.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              if (params.fromBlock != null) {\n                params.fromBlock = (0, _web3Utils.toHex)(params.fromBlock);\n              }\n\n              if (params.toBlock != null) {\n                params.toBlock = (0, _web3Utils.toHex)(params.toBlock);\n              }\n\n              _context5.next = 4;\n              return this.send('eth_getLogs', [params]);\n\n            case 4:\n              res = _context5.sent;\n              return _context5.abrupt(\"return\", res);\n\n            case 6:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, this);\n    }));\n\n    function getPastEvents(_x2) {\n      return _getPastEvents.apply(this, arguments);\n    }\n\n    return getPastEvents;\n  }();\n\n  _proto.decodeLog = function decodeLog(log, inputs) {\n    return _web3EthAbi.default.decodeLog(inputs, log.data, log.topics);\n  } // Subscriptions\n  ;\n\n  _proto.subscribe =\n  /*#__PURE__*/\n  function () {\n    var _subscribe = (0, _asyncToGenerator2.default)(\n    /*#__PURE__*/\n    _regenerator.default.mark(function _callee6(method, params) {\n      return _regenerator.default.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              if (this.web3Provider.subscribe) {\n                _context6.next = 2;\n                break;\n              }\n\n              throw new Error('subscriptions not supported');\n\n            case 2:\n              return _context6.abrupt(\"return\", this.web3Provider.subscribe('eth_subscribe', method, params));\n\n            case 3:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, this);\n    }));\n\n    function subscribe(_x3, _x4) {\n      return _subscribe.apply(this, arguments);\n    }\n\n    return subscribe;\n  }();\n\n  _proto.unsubscribe =\n  /*#__PURE__*/\n  function () {\n    var _unsubscribe = (0, _asyncToGenerator2.default)(\n    /*#__PURE__*/\n    _regenerator.default.mark(function _callee7(id) {\n      return _regenerator.default.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              if (this.web3Provider.unsubscribe) {\n                _context7.next = 2;\n                break;\n              }\n\n              throw new Error('subscriptions not supported');\n\n            case 2:\n              return _context7.abrupt(\"return\", this.web3Provider.unsubscribe(id));\n\n            case 3:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7, this);\n    }));\n\n    function unsubscribe(_x5) {\n      return _unsubscribe.apply(this, arguments);\n    }\n\n    return unsubscribe;\n  }();\n\n  _proto.clearSubscriptions =\n  /*#__PURE__*/\n  function () {\n    var _clearSubscriptions = (0, _asyncToGenerator2.default)(\n    /*#__PURE__*/\n    _regenerator.default.mark(function _callee8() {\n      return _regenerator.default.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              if (this.web3Provider.clearSubscriptions) {\n                _context8.next = 2;\n                break;\n              }\n\n              throw new Error('subscriptions not supported');\n\n            case 2:\n              return _context8.abrupt(\"return\", this.web3Provider.clearSubscriptions());\n\n            case 3:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8, this);\n    }));\n\n    function clearSubscriptions() {\n      return _clearSubscriptions.apply(this, arguments);\n    }\n\n    return clearSubscriptions;\n  }() // Signing\n  ;\n\n  _proto.signData =\n  /*#__PURE__*/\n  function () {\n    var _signData = (0, _asyncToGenerator2.default)(\n    /*#__PURE__*/\n    _regenerator.default.mark(function _callee9(params) {\n      return _regenerator.default.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              if (!(this._walletProvider != null)) {\n                _context9.next = 2;\n                break;\n              }\n\n              return _context9.abrupt(\"return\", this._walletProvider.sign(params));\n\n            case 2:\n              throw new Error('No wallet provider found');\n\n            case 3:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9, this);\n    }));\n\n    function signData(_x6) {\n      return _signData.apply(this, arguments);\n    }\n\n    return signData;\n  }();\n\n  _proto.signMessage =\n  /*#__PURE__*/\n  function () {\n    var _signMessage = (0, _asyncToGenerator2.default)(\n    /*#__PURE__*/\n    _regenerator.default.mark(function _callee10(message, address) {\n      var data;\n      return _regenerator.default.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              data = (0, _web3Utils.toHex)(message);\n              return _context10.abrupt(\"return\", this.signData({\n                address: address,\n                data: data\n              }));\n\n            case 2:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10, this);\n    }));\n\n    function signMessage(_x7, _x8) {\n      return _signMessage.apply(this, arguments);\n    }\n\n    return signMessage;\n  }() // Sending transactions\n  ;\n\n  _proto.sendETH = function sendETH(params) {\n    var valueWei = (0, _web3Utils.toWei)(String(params.value));\n    var valueHex = (0, _web3Utils.toHex)(valueWei);\n    var txParams = {\n      to: params.to,\n      from: params.from,\n      value: valueHex\n    };\n    return this.sendAndListen(txParams, params.confirmations);\n  };\n\n  _proto.getConfirmations =\n  /*#__PURE__*/\n  function () {\n    var _getConfirmations = (0, _asyncToGenerator2.default)(\n    /*#__PURE__*/\n    _regenerator.default.mark(function _callee11(txHash) {\n      var res, latestBlock, txBlock;\n      return _regenerator.default.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              _context11.next = 2;\n              return this.send('eth_getTransactionReceipt', [txHash]);\n\n            case 2:\n              res = _context11.sent;\n\n              if (res) {\n                _context11.next = 5;\n                break;\n              }\n\n              return _context11.abrupt(\"return\", null);\n\n            case 5:\n              _context11.next = 7;\n              return this.getLatestBlock();\n\n            case 7:\n              latestBlock = _context11.sent;\n              txBlock = (0, _web3Utils.hexToNumber)(res.blockNumber);\n              return _context11.abrupt(\"return\", latestBlock - txBlock);\n\n            case 10:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11, this);\n    }));\n\n    function getConfirmations(_x9) {\n      return _getConfirmations.apply(this, arguments);\n    }\n\n    return getConfirmations;\n  }();\n\n  _proto.getLatestBlock =\n  /*#__PURE__*/\n  function () {\n    var _getLatestBlock = (0, _asyncToGenerator2.default)(\n    /*#__PURE__*/\n    _regenerator.default.mark(function _callee12() {\n      var blockRes;\n      return _regenerator.default.wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              _context12.next = 2;\n              return this.send('eth_blockNumber', []);\n\n            case 2:\n              blockRes = _context12.sent;\n              return _context12.abrupt(\"return\", (0, _web3Utils.hexToNumber)(blockRes));\n\n            case 4:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12, this);\n    }));\n\n    function getLatestBlock() {\n      return _getLatestBlock.apply(this, arguments);\n    }\n\n    return getLatestBlock;\n  }();\n\n  _proto.confirmTransaction =\n  /*#__PURE__*/\n  function () {\n    var _confirmTransaction = (0, _asyncToGenerator2.default)(\n    /*#__PURE__*/\n    _regenerator.default.mark(function _callee14(txHash, confirmationsRequired) {\n      var _this3 = this;\n\n      return _regenerator.default.wrap(function _callee14$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              if (confirmationsRequired === void 0) {\n                confirmationsRequired = 10;\n              }\n\n              return _context14.abrupt(\"return\", new Promise(function (resolve, reject) {\n                _this3._intervals[txHash] = setInterval(\n                /*#__PURE__*/\n                (0, _asyncToGenerator2.default)(\n                /*#__PURE__*/\n                _regenerator.default.mark(function _callee13() {\n                  var confirmations;\n                  return _regenerator.default.wrap(function _callee13$(_context13) {\n                    while (1) {\n                      switch (_context13.prev = _context13.next) {\n                        case 0:\n                          _context13.prev = 0;\n                          _context13.next = 3;\n                          return _this3.getConfirmations(txHash);\n\n                        case 3:\n                          confirmations = _context13.sent;\n\n                          if (confirmations !== null && confirmations >= confirmationsRequired) {\n                            clearInterval(_this3._intervals[txHash]);\n                            _this3._intervals[txHash] = undefined;\n                            resolve(true);\n                          }\n\n                          _context13.next = 10;\n                          break;\n\n                        case 7:\n                          _context13.prev = 7;\n                          _context13.t0 = _context13[\"catch\"](0);\n                          reject(_context13.t0);\n\n                        case 10:\n                        case \"end\":\n                          return _context13.stop();\n                      }\n                    }\n                  }, _callee13, null, [[0, 7]]);\n                })), 2000);\n              }));\n\n            case 2:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, _callee14);\n    }));\n\n    function confirmTransaction(_x10, _x11) {\n      return _confirmTransaction.apply(this, arguments);\n    }\n\n    return confirmTransaction;\n  }();\n\n  _proto.estimateGas =\n  /*#__PURE__*/\n  function () {\n    var _estimateGas = (0, _asyncToGenerator2.default)(\n    /*#__PURE__*/\n    _regenerator.default.mark(function _callee15(txParams) {\n      var _ref2, gasLimit, blockGasLimitBN, maxGasBN, estGasHex, estGasBN, paddedGasBN;\n\n      return _regenerator.default.wrap(function _callee15$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              _context15.next = 2;\n              return this.send('eth_getBlockByNumber', ['latest', false]);\n\n            case 2:\n              _ref2 = _context15.sent;\n              gasLimit = _ref2.gasLimit; // Get the block limit from previous block\n\n              blockGasLimitBN = (0, _web3Utils.toBN)(gasLimit);\n              maxGasBN = blockGasLimitBN.muln(0.9); // Get estimated tx limit\n\n              _context15.next = 8;\n              return this.send('eth_estimateGas', [txParams]);\n\n            case 8:\n              estGasHex = _context15.sent;\n              estGasBN = (0, _web3Utils.toBN)(estGasHex); // Pad the estimated limit\n\n              paddedGasBN = estGasBN.muln(1.5);\n\n              if (!estGasBN.gt(maxGasBN)) {\n                _context15.next = 13;\n                break;\n              }\n\n              return _context15.abrupt(\"return\", estGasHex);\n\n            case 13:\n              if (!paddedGasBN.lt(maxGasBN)) {\n                _context15.next = 15;\n                break;\n              }\n\n              return _context15.abrupt(\"return\", (0, _web3Utils.numberToHex)(paddedGasBN));\n\n            case 15:\n              return _context15.abrupt(\"return\", (0, _web3Utils.numberToHex)(maxGasBN));\n\n            case 16:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, _callee15, this);\n    }));\n\n    function estimateGas(_x12) {\n      return _estimateGas.apply(this, arguments);\n    }\n\n    return estimateGas;\n  }();\n\n  _proto.completeTxParams =\n  /*#__PURE__*/\n  function () {\n    var _completeTxParams = (0, _asyncToGenerator2.default)(\n    /*#__PURE__*/\n    _regenerator.default.mark(function _callee16(txParams) {\n      return _regenerator.default.wrap(function _callee16$(_context16) {\n        while (1) {\n          switch (_context16.prev = _context16.next) {\n            case 0:\n              if (txParams.from) {\n                _context16.next = 2;\n                break;\n              }\n\n              throw new Error('Transaction \"from\" address required');\n\n            case 2:\n              if (txParams.nonce) {\n                _context16.next = 6;\n                break;\n              }\n\n              _context16.next = 5;\n              return this.send('eth_getTransactionCount', [txParams.from, 'pending']);\n\n            case 5:\n              txParams.nonce = _context16.sent;\n\n            case 6:\n              if (txParams.gas) {\n                _context16.next = 20;\n                break;\n              }\n\n              _context16.prev = 7;\n              _context16.next = 10;\n              return this.estimateGas(txParams);\n\n            case 10:\n              txParams.gas = _context16.sent;\n              _context16.next = 20;\n              break;\n\n            case 13:\n              _context16.prev = 13;\n              _context16.t0 = _context16[\"catch\"](7);\n\n              if (!(_context16.t0.message === 'no contract code at given address')) {\n                _context16.next = 19;\n                break;\n              }\n\n              txParams.gas = '0xcf08';\n              _context16.next = 20;\n              break;\n\n            case 19:\n              throw _context16.t0;\n\n            case 20:\n              if (txParams.gasPrice) {\n                _context16.next = 24;\n                break;\n              }\n\n              _context16.next = 23;\n              return this.send('eth_gasPrice', []);\n\n            case 23:\n              txParams.gasPrice = _context16.sent;\n\n            case 24:\n              return _context16.abrupt(\"return\", txParams);\n\n            case 25:\n            case \"end\":\n              return _context16.stop();\n          }\n        }\n      }, _callee16, this, [[7, 13]]);\n    }));\n\n    function completeTxParams(_x13) {\n      return _completeTxParams.apply(this, arguments);\n    }\n\n    return completeTxParams;\n  }();\n\n  _proto.prepareAndSignTx =\n  /*#__PURE__*/\n  function () {\n    var _prepareAndSignTx = (0, _asyncToGenerator2.default)(\n    /*#__PURE__*/\n    _regenerator.default.mark(function _callee17(txParams) {\n      var fullParams;\n      return _regenerator.default.wrap(function _callee17$(_context17) {\n        while (1) {\n          switch (_context17.prev = _context17.next) {\n            case 0:\n              if (!(this._walletProvider != null)) {\n                _context17.next = 6;\n                break;\n              }\n\n              this.validateTransaction(txParams);\n              _context17.next = 4;\n              return this.completeTxParams(txParams);\n\n            case 4:\n              fullParams = _context17.sent;\n              return _context17.abrupt(\"return\", this._walletProvider.signTransaction(fullParams));\n\n            case 6:\n              throw new Error('No wallet provider found');\n\n            case 7:\n            case \"end\":\n              return _context17.stop();\n          }\n        }\n      }, _callee17, this);\n    }));\n\n    function prepareAndSignTx(_x14) {\n      return _prepareAndSignTx.apply(this, arguments);\n    }\n\n    return prepareAndSignTx;\n  }();\n\n  _proto.validateTransaction = function validateTransaction(txParams) {\n    if (txParams.to && !(0, _web3Utils.isAddress)(txParams.to)) {\n      throw new Error('Invalid to address');\n    }\n\n    if (!txParams.from) {\n      throw new Error('Missing sender address');\n    }\n\n    if (!(0, _web3Utils.isAddress)(txParams.from)) {\n      throw new Error('Invalid sender address');\n    }\n  };\n\n  _proto.generateTXRequest =\n  /*#__PURE__*/\n  function () {\n    var _generateTXRequest = (0, _asyncToGenerator2.default)(\n    /*#__PURE__*/\n    _regenerator.default.mark(function _callee18(txParams) {\n      var signedTx;\n      return _regenerator.default.wrap(function _callee18$(_context18) {\n        while (1) {\n          switch (_context18.prev = _context18.next) {\n            case 0:\n              _context18.next = 2;\n              return this.prepareAndSignTx(txParams);\n\n            case 2:\n              signedTx = _context18.sent;\n              return _context18.abrupt(\"return\", {\n                method: 'eth_sendRawTransaction',\n                params: [signedTx]\n              });\n\n            case 4:\n            case \"end\":\n              return _context18.stop();\n          }\n        }\n      }, _callee18, this);\n    }));\n\n    function generateTXRequest(_x15) {\n      return _generateTXRequest.apply(this, arguments);\n    }\n\n    return generateTXRequest;\n  }();\n\n  _proto.sendAndListen =\n  /*#__PURE__*/\n  function () {\n    var _sendAndListen = (0, _asyncToGenerator2.default)(\n    /*#__PURE__*/\n    _regenerator.default.mark(function _callee19(txParams, confirmations) {\n      var _this4 = this;\n\n      var eventEmitter, request;\n      return _regenerator.default.wrap(function _callee19$(_context19) {\n        while (1) {\n          switch (_context19.prev = _context19.next) {\n            case 0:\n              eventEmitter = new _events.default();\n              _context19.next = 3;\n              return this.generateTXRequest(txParams);\n\n            case 3:\n              request = _context19.sent;\n              this.send(request.method, request.params).then(function (res) {\n                eventEmitter.emit('hash', res);\n                return _this4.confirmTransaction(res, 0).then(function () {\n                  eventEmitter.emit('mined', res);\n\n                  if (confirmations) {\n                    return _this4.confirmTransaction(res, confirmations);\n                  }\n                });\n              }).then(function (res) {\n                eventEmitter.emit('confirmed', res);\n              }).catch(function (err) {\n                eventEmitter.emit('error', err);\n              });\n              return _context19.abrupt(\"return\", eventEmitter);\n\n            case 6:\n            case \"end\":\n              return _context19.stop();\n          }\n        }\n      }, _callee19, this);\n    }));\n\n    function sendAndListen(_x16, _x17) {\n      return _sendAndListen.apply(this, arguments);\n    }\n\n    return sendAndListen;\n  }();\n\n  _proto.send =\n  /*#__PURE__*/\n  function () {\n    var _send = (0, _asyncToGenerator2.default)(\n    /*#__PURE__*/\n    _regenerator.default.mark(function _callee20(method, params) {\n      return _regenerator.default.wrap(function _callee20$(_context20) {\n        while (1) {\n          switch (_context20.prev = _context20.next) {\n            case 0:\n              return _context20.abrupt(\"return\", this.web3Provider.send(method, params));\n\n            case 1:\n            case \"end\":\n              return _context20.stop();\n          }\n        }\n      }, _callee20, this);\n    }));\n\n    function send(_x18, _x19) {\n      return _send.apply(this, arguments);\n    }\n\n    return send;\n  }();\n\n  (0, _createClass2.default)(EthClient, [{\n    key: \"web3Provider\",\n    get: function get() {\n      return this._web3Provider;\n    }\n  }, {\n    key: \"providerURL\",\n    set: function set(url) {\n      // TODO: handle http\n      if (this._web3Provider.clearSubscriptions) {\n        this._web3Provider.clearSubscriptions();\n      }\n\n      this._web3Provider = new _web3Providers.WebsocketProvider(url, wsOptions);\n      this.fetchNetwork();\n    }\n  }, {\n    key: \"networkName\",\n    get: function get() {\n      return this._networkName || 'Awaiting network';\n    }\n  }, {\n    key: \"networkID\",\n    get: function get() {\n      return this._networkID || '0';\n    }\n  }, {\n    key: \"walletProvider\",\n    get: function get() {\n      return this._walletProvider;\n    }\n  }]);\n  return EthClient;\n}(_events.default);\n\nexports.default = EthClient;","map":null,"metadata":{},"sourceType":"script"}