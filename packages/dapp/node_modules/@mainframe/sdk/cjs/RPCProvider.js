"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _eventemitter = _interopRequireDefault(require("eventemitter3"));

var _rxjs = require("rxjs");

var RpcProvider =
/*#__PURE__*/
function (_EventEmitter) {
  (0, _inheritsLoose2.default)(RpcProvider, _EventEmitter);

  function RpcProvider(rpc) {
    var _this;

    _this = _EventEmitter.call(this) || this;
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_rpc", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_requestId", 1);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "subscriptions", {});
    _this._rpc = rpc;
    return _this;
  }

  var _proto = RpcProvider.prototype;

  _proto.send =
  /*#__PURE__*/
  function () {
    var _send = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee(method, params) {
      var _this2 = this;

      var result, payload, subscription, unsubscribe, sub, unsub;
      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              payload = {
                id: this._requestId++,
                jsonrpc: '2.0',
                params: params,
                method: method
              };

              if (!(method === 'eth_unsubscribe')) {
                _context.next = 7;
                break;
              }

              _context.next = 4;
              return this._rpc.request('blockchain_ethUnsubscribe', {
                id: params[0]
              });

            case 4:
              result = _context.sent;
              _context.next = 21;
              break;

            case 7:
              if (!(method === 'eth_subscribe')) {
                _context.next = 18;
                break;
              }

              _context.next = 10;
              return this._rpc.request('blockchain_ethSubscribe', payload);

            case 10:
              subscription = _context.sent;

              unsubscribe = function unsubscribe() {
                var unsubPayload = {
                  id: _this2._requestId++,
                  jsonrpc: '2.0',
                  params: [subscription],
                  method: 'eth_unsubscribe'
                };
                return _this2._rpc.request('blockchain_ethSend', unsubPayload);
              };

              sub = _rxjs.Observable.create(function (observer) {
                _this2._rpc.subscribe({
                  next: function next(msg) {
                    if (msg.method === 'eth_blockchain_subscription' && msg.params != null && msg.params.subscription === subscription) {
                      observer.next(msg);
                    }
                  },
                  error: function error(err) {
                    observer.error(err);
                    unsubscribe();
                  },
                  complete: function complete() {
                    observer.complete();
                    unsubscribe();
                  }
                });

                return unsubscribe;
              });
              unsub = sub.subscribe(function (value) {
                _this2.emit('data', value);
              });
              this.subscriptions[subscription] = unsub;
              result = subscription;
              _context.next = 21;
              break;

            case 18:
              _context.next = 20;
              return this._rpc.request('blockchain_ethSend', payload);

            case 20:
              result = _context.sent;

            case 21:
              return _context.abrupt("return", result);

            case 22:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function send(_x, _x2) {
      return _send.apply(this, arguments);
    }

    return send;
  }();

  return RpcProvider;
}(_eventemitter.default);

exports.default = RpcProvider;