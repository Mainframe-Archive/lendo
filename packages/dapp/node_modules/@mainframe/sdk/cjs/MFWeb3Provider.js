"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _eventemitter = _interopRequireDefault(require("eventemitter3"));

var _eth = require("@mainframe/eth");

var EthereumProvider =
/*#__PURE__*/
function (_EventEmitter) {
  (0, _inheritsLoose2.default)(EthereumProvider, _EventEmitter);

  function EthereumProvider(ethClient) {
    var _this;

    _this = _EventEmitter.call(this) || this;
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_ethClient", void 0);
    _this._ethClient = ethClient;
    return _this;
  } // Emulate older provider types that use sendAsync


  var _proto = EthereumProvider.prototype;

  _proto.sendAsync =
  /*#__PURE__*/
  function () {
    var _sendAsync = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee(payload, cb) {
      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", this.send(payload, cb));

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function sendAsync(_x, _x2) {
      return _sendAsync.apply(this, arguments);
    }

    return sendAsync;
  }() // Emulate older provider types that use callbacks
  ;

  _proto.send =
  /*#__PURE__*/
  function () {
    var _send2 = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee2(methodOrPayload, paramsOrCallback) {
      var method, params, id, _response;

      return _regenerator.default.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!(typeof methodOrPayload === 'string' && Array.isArray(paramsOrCallback))) {
                _context2.next = 4;
                break;
              }

              return _context2.abrupt("return", this._send(methodOrPayload, paramsOrCallback));

            case 4:
              if (!(typeof methodOrPayload !== 'object' || typeof paramsOrCallback !== 'function')) {
                _context2.next = 6;
                break;
              }

              throw new Error('Bad argument types');

            case 6:
              _context2.prev = 6;
              method = methodOrPayload.method, params = methodOrPayload.params, id = methodOrPayload.id;
              _context2.next = 10;
              return this._send(method, params);

            case 10:
              _response = _context2.sent;
              paramsOrCallback(null, (0, _eth.jsonRpcResponse)(_response, id));
              _context2.next = 17;
              break;

            case 14:
              _context2.prev = 14;
              _context2.t0 = _context2["catch"](6);
              paramsOrCallback(_context2.t0);

            case 17:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this, [[6, 14]]);
    }));

    function send(_x3, _x4) {
      return _send2.apply(this, arguments);
    }

    return send;
  }();

  _proto._send =
  /*#__PURE__*/
  function () {
    var _send3 = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee3(method, params) {
      var response, request;
      return _regenerator.default.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.t0 = method;
              _context3.next = _context3.t0 === 'eth_sendTransaction' ? 3 : _context3.t0 === 'eth_accounts' ? 11 : _context3.t0 === 'eth_signTransaction' ? 16 : _context3.t0 === 'eth_sign' ? 21 : 26;
              break;

            case 3:
              if (!this._ethClient.walletProvider) {
                _context3.next = 10;
                break;
              }

              _context3.next = 6;
              return this._ethClient.generateTXRequest(params[0]);

            case 6:
              request = _context3.sent;
              _context3.next = 9;
              return this._ethClient.send(request.method, request.params);

            case 9:
              response = _context3.sent;

            case 10:
              return _context3.abrupt("break", 29);

            case 11:
              if (!this._ethClient.walletProvider) {
                _context3.next = 15;
                break;
              }

              _context3.next = 14;
              return this._ethClient.walletProvider.getAccounts();

            case 14:
              response = _context3.sent;

            case 15:
              return _context3.abrupt("break", 29);

            case 16:
              if (!this._ethClient.walletProvider) {
                _context3.next = 20;
                break;
              }

              _context3.next = 19;
              return this._ethClient.walletProvider.signTransaction(params[0]);

            case 19:
              response = _context3.sent;

            case 20:
              return _context3.abrupt("break", 29);

            case 21:
              if (!this._ethClient.walletProvider) {
                _context3.next = 25;
                break;
              }

              _context3.next = 24;
              return this._ethClient.walletProvider.sign({
                address: params[0],
                data: params[1]
              });

            case 24:
              response = _context3.sent;

            case 25:
              return _context3.abrupt("break", 29);

            case 26:
              _context3.next = 28;
              return this._ethClient.send(method, params);

            case 28:
              response = _context3.sent;

            case 29:
              return _context3.abrupt("return", response);

            case 30:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function _send(_x5, _x6) {
      return _send3.apply(this, arguments);
    }

    return _send;
  }() // Signal EIP1193 support
  ;

  _proto.isEIP1193 = function isEIP1193() {
    return true;
  };

  return EthereumProvider;
}(_eventemitter.default);

exports.default = EthereumProvider;