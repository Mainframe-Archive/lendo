"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _ClientAPIs2 = _interopRequireDefault(require("../ClientAPIs"));

var ContactsAPIs =
/*#__PURE__*/
function (_ClientAPIs) {
  (0, _inheritsLoose2.default)(ContactsAPIs, _ClientAPIs);

  function ContactsAPIs() {
    return _ClientAPIs.apply(this, arguments) || this;
  }

  var _proto = ContactsAPIs.prototype;

  _proto.selectContacts =
  /*#__PURE__*/
  function () {
    var _selectContacts = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee() {
      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", this._rpc.request('contacts_select', {
                multi: true
              }));

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function selectContacts() {
      return _selectContacts.apply(this, arguments);
    }

    return selectContacts;
  }();

  _proto.selectContact =
  /*#__PURE__*/
  function () {
    var _selectContact = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee2() {
      var contacts;
      return _regenerator.default.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this._rpc.request('contacts_select', {});

            case 2:
              contacts = _context2.sent;

              if (!(contacts && contacts.length)) {
                _context2.next = 5;
                break;
              }

              return _context2.abrupt("return", contacts[0]);

            case 5:
              return _context2.abrupt("return", null);

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function selectContact() {
      return _selectContact.apply(this, arguments);
    }

    return selectContact;
  }();

  _proto.getDataForContacts =
  /*#__PURE__*/
  function () {
    var _getDataForContacts = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee3(contactIDs) {
      return _regenerator.default.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", this._rpc.request('contacts_getData', {
                contactIDs: contactIDs
              }));

            case 1:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function getDataForContacts(_x) {
      return _getDataForContacts.apply(this, arguments);
    }

    return getDataForContacts;
  }();

  _proto.getDataForContact =
  /*#__PURE__*/
  function () {
    var _getDataForContact = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee4(contactID) {
      var contacts;
      return _regenerator.default.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return this._rpc.request('contacts_getData', {
                contactIDs: [contactID]
              });

            case 2:
              contacts = _context4.sent;

              if (!(contacts && contacts.length)) {
                _context4.next = 5;
                break;
              }

              return _context4.abrupt("return", contacts[0]);

            case 5:
              return _context4.abrupt("return", null);

            case 6:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function getDataForContact(_x2) {
      return _getDataForContact.apply(this, arguments);
    }

    return getDataForContact;
  }();

  _proto.getApprovedContacts =
  /*#__PURE__*/
  function () {
    var _getApprovedContacts = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee5() {
      return _regenerator.default.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              return _context5.abrupt("return", this._rpc.request('contacts_getApproved'));

            case 1:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }));

    function getApprovedContacts() {
      return _getApprovedContacts.apply(this, arguments);
    }

    return getApprovedContacts;
  }();

  return ContactsAPIs;
}(_ClientAPIs2.default);

exports.default = ContactsAPIs;