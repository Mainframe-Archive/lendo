"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _rxjs = require("rxjs");

var _ClientAPIs2 = _interopRequireDefault(require("../ClientAPIs"));

var CommsAPIs =
/*#__PURE__*/
function (_ClientAPIs) {
  (0, _inheritsLoose2.default)(CommsAPIs, _ClientAPIs);

  function CommsAPIs() {
    return _ClientAPIs.apply(this, arguments) || this;
  }

  var _proto = CommsAPIs.prototype;

  _proto.publish =
  /*#__PURE__*/
  function () {
    var _publish = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee(contactID, key, value) {
      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", this._rpc.request('comms_publish', {
                contactID: contactID,
                key: key,
                value: value
              }));

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function publish(_x, _x2, _x3) {
      return _publish.apply(this, arguments);
    }

    return publish;
  }();

  _proto.subscribe =
  /*#__PURE__*/
  function () {
    var _subscribe = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee2(contactID, key) {
      var _this = this;

      var subscription, unsubscribe;
      return _regenerator.default.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this._rpc.request('comms_subscribe', {
                contactID: contactID,
                key: key
              });

            case 2:
              subscription = _context2.sent;

              unsubscribe = function unsubscribe() {
                return _this._rpc.request('sub_unsubscribe', {
                  id: subscription
                });
              };

              return _context2.abrupt("return", _rxjs.Observable.create(function (observer) {
                _this._rpc.subscribe({
                  next: function next(msg) {
                    if (msg.method === 'comms_subscription' && msg.params != null && msg.params.subscription === subscription) {
                      var result = msg.params.result;

                      if (result != null) {
                        try {
                          observer.next(result);
                        } catch (err) {
                          // eslint-disable-next-line no-console
                          console.warn('Error handling message', result, err);
                        }
                      }
                    }
                  },
                  error: function error(err) {
                    observer.error(err);
                    unsubscribe();
                  },
                  complete: function complete() {
                    observer.complete();
                    unsubscribe();
                  }
                });

                return unsubscribe;
              }));

            case 5:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function subscribe(_x4, _x5) {
      return _subscribe.apply(this, arguments);
    }

    return subscribe;
  }();

  _proto.getSubscribable =
  /*#__PURE__*/
  function () {
    var _getSubscribable = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee3(contactID) {
      return _regenerator.default.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", this._rpc.request('comms_getSubscribable', {
                contactID: contactID
              }));

            case 1:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function getSubscribable(_x6) {
      return _getSubscribable.apply(this, arguments);
    }

    return getSubscribable;
  }();

  return CommsAPIs;
}(_ClientAPIs2.default);

exports.default = CommsAPIs;