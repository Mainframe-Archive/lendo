"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _rxjs = require("rxjs");

var _eth = require("@mainframe/eth");

var _RPCProvider = _interopRequireDefault(require("../RPCProvider"));

var _MFWeb3Provider = _interopRequireDefault(require("../MFWeb3Provider"));

var _ClientAPIs2 = _interopRequireDefault(require("../ClientAPIs"));

var MFT_TOKEN_ADDRESSES = {
  ropsten: '0xa46f1563984209fe47f8236f8b01a03f03f957e4',
  mainnet: '0xdf2c7238198ad8b389666574f2d8bc411a4b7428'
};

var WalletProvider =
/*#__PURE__*/
function () {
  function WalletProvider(rpc) {
    (0, _defineProperty2.default)(this, "_rpc", void 0);
    this._rpc = rpc;
  }

  var _proto = WalletProvider.prototype;

  _proto.getAccounts =
  /*#__PURE__*/
  function () {
    var _getAccounts = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee() {
      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", this._rpc.request('wallet_getEthAccounts'));

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function getAccounts() {
      return _getAccounts.apply(this, arguments);
    }

    return getAccounts;
  }();

  _proto.signTransaction =
  /*#__PURE__*/
  function () {
    var _signTransaction = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee2(params) {
      return _regenerator.default.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", this._rpc.request('wallet_signEthTx', params));

            case 1:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function signTransaction(_x) {
      return _signTransaction.apply(this, arguments);
    }

    return signTransaction;
  }();

  _proto.sign =
  /*#__PURE__*/
  function () {
    var _sign = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee3(params) {
      return _regenerator.default.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", this._rpc.request('wallet_signEthData', params));

            case 1:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function sign(_x2) {
      return _sign.apply(this, arguments);
    }

    return sign;
  }();

  return WalletProvider;
}();

var subscribe =
/*#__PURE__*/
function () {
  var _ref = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee4(rpc, rpcMethod, subMethod) {
    var subscription, unsubscribe;
    return _regenerator.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return rpc.request(rpcMethod);

          case 2:
            subscription = _context4.sent;

            unsubscribe = function unsubscribe() {
              return rpc.request('sub_unsubscribe', {
                id: subscription
              });
            };

            return _context4.abrupt("return", _rxjs.Observable.create(function (observer) {
              rpc.subscribe({
                next: function next(msg) {
                  if (msg.method === subMethod && msg.params != null && msg.params.subscription === subscription.id) {
                    var result = msg.params.result;

                    if (result != null) {
                      try {
                        observer.next(result);
                      } catch (err) {
                        // eslint-disable-next-line no-console
                        console.warn('Error handling message', result, err);
                      }
                    }
                  }
                },
                error: function error(err) {
                  observer.error(err);
                  unsubscribe();
                },
                complete: function complete() {
                  observer.complete();
                  unsubscribe();
                }
              });
              return unsubscribe;
            }));

          case 5:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));

  return function subscribe(_x3, _x4, _x5) {
    return _ref.apply(this, arguments);
  };
}();

var EthAPIs =
/*#__PURE__*/
function (_ClientAPIs) {
  (0, _inheritsLoose2.default)(EthAPIs, _ClientAPIs);

  function EthAPIs(sdk) {
    var _this;

    _this = _ClientAPIs.call(this, sdk._rpc) || this;
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_web3Provider", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_ethClient", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_sdk", void 0);
    _this._sdk = sdk;
    var subscriptions = {
      accountsChanged: function accountsChanged() {
        return subscribe(sdk._rpc, 'wallet_subEthAccountsChanged', 'eth_accounts_subscription');
      },
      networkChanged: function networkChanged() {
        return subscribe(sdk._rpc, 'blockchain_subscribeNetworkChanged', 'eth_network_subscription');
      }
    };
    var rpcProvider = new _RPCProvider.default(sdk._rpc);
    var walletProvider = new WalletProvider(sdk._rpc);
    _this._ethClient = new _eth.EthClient(rpcProvider, walletProvider, subscriptions);
    _this._web3Provider = new _MFWeb3Provider.default(_this._ethClient);
    rpcProvider.on('data', function (res) {
      _this._web3Provider.emit && _this._web3Provider.emit('data', res);
    });

    _this._ethClient.on('eth_subscription', function (value) {
      _this.emit('eth_subscription', value);

      _this._web3Provider.emit && _this._web3Provider.emit('eth_subscription', value);
    });

    _this._ethClient.on('accountsChanged', function (value) {
      _this.emit('accountsChanged', value);

      _this._web3Provider.emit && _this._web3Provider.emit('accountsChanged', value);
    });

    _this._ethClient.on('networkChanged', function (value) {
      _this.emit('networkChanged', value);

      _this._web3Provider.emit && _this._web3Provider.emit('networkChanged', value);
    });

    return _this;
  }

  var _proto2 = EthAPIs.prototype;

  _proto2.getAccounts = function getAccounts() {
    return this._ethClient.getAccounts();
  };

  _proto2.getDefaultAccount =
  /*#__PURE__*/
  function () {
    var _getDefaultAccount = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee5() {
      var accounts;
      return _regenerator.default.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return this._ethClient.getAccounts();

            case 2:
              accounts = _context5.sent;
              return _context5.abrupt("return", accounts ? accounts[0] : undefined);

            case 4:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }));

    function getDefaultAccount() {
      return _getDefaultAccount.apply(this, arguments);
    }

    return getDefaultAccount;
  }();

  _proto2.sign = function sign(message, address) {
    return this._ethClient.signMessage(message, address);
  };

  _proto2.sendETH = function sendETH(params) {
    return this._ethClient.sendETH(params);
  };

  _proto2.sendMFT = function sendMFT(params) {
    if (!this._ethClient._networkName) {
      throw new Error('Unable to establish Ethereum network');
    }

    var tokenAddress = MFT_TOKEN_ADDRESSES[this._ethClient._networkName];

    if (!tokenAddress) {
      throw new Error("MFT contract not available on " + this._ethClient._networkName);
    }

    var contract = this._ethClient.erc20Contract(tokenAddress);

    return contract.transfer(params);
  };

  (0, _createClass2.default)(EthAPIs, [{
    key: "web3Provider",
    get: function get() {
      return this._web3Provider;
    }
  }, {
    key: "networkVersion",
    get: function get() {
      return this._ethClient.networkID;
    }
  }]);
  return EthAPIs;
}(_ClientAPIs2.default);

exports.default = EthAPIs;