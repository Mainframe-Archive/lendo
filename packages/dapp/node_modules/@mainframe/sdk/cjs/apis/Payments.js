"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _ClientAPIs2 = _interopRequireDefault(require("../ClientAPIs"));

var PaymentAPIs =
/*#__PURE__*/
function (_ClientAPIs) {
  (0, _inheritsLoose2.default)(PaymentAPIs, _ClientAPIs);

  function PaymentAPIs(sdk) {
    var _this;

    _this = _ClientAPIs.call(this, sdk._rpc) || this;
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_sdk", void 0);
    _this._sdk = sdk;
    return _this;
  }

  var _proto = PaymentAPIs.prototype;

  _proto.payContact =
  /*#__PURE__*/
  function () {
    var _payContact = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee(params) {
      var contactID, currency, value, contact, accounts, sendParams;
      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              contactID = params.contactID, currency = params.currency, value = params.value;

              if (contactID) {
                _context.next = 7;
                break;
              }

              _context.next = 4;
              return this._sdk.contacts.selectContact();

            case 4:
              contact = _context.sent;
              _context.next = 10;
              break;

            case 7:
              _context.next = 9;
              return this._sdk.contacts.getDataForContact(contactID);

            case 9:
              contact = _context.sent;

            case 10:
              if (contact) {
                _context.next = 12;
                break;
              }

              throw new Error('No contact selected');

            case 12:
              if (!(!contact.data || !contact.data.profile.ethAddress)) {
                _context.next = 14;
                break;
              }

              throw new Error("No ETH address found for contact: " + contact.id);

            case 14:
              _context.next = 16;
              return this._sdk.ethereum.getAccounts();

            case 16:
              accounts = _context.sent;

              if (!(!accounts || !accounts.length)) {
                _context.next = 19;
                break;
              }

              throw new Error("No wallets found");

            case 19:
              sendParams = {
                from: accounts[0],
                to: contact.data.profile.ethAddress,
                value: value
              };
              _context.t0 = currency;
              _context.next = _context.t0 === 'MFT' ? 23 : _context.t0 === 'ETH' ? 24 : 25;
              break;

            case 23:
              return _context.abrupt("return", this._sdk.ethereum.sendMFT(sendParams));

            case 24:
              return _context.abrupt("return", this._sdk.ethereum.sendETH(sendParams));

            case 25:
              throw new Error("Unsupported currency type: " + currency);

            case 26:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function payContact(_x) {
      return _payContact.apply(this, arguments);
    }

    return payContact;
  }();

  return PaymentAPIs;
}(_ClientAPIs2.default);

exports.default = PaymentAPIs;