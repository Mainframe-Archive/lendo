"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = exports.NETWORKS = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _events = _interopRequireDefault(require("events"));

var _web3Utils = require("web3-utils");

var _web3Providers = require("web3-providers");

var _ERC = _interopRequireDefault(require("./Contracts/ERC20"));

var _BaseContract = _interopRequireDefault(require("./Contracts/BaseContract"));

var _web3EthAbi = _interopRequireDefault(require("./web3EthAbi"));

var NETWORKS = {
  '1': 'mainnet',
  '2': 'morden',
  '3': 'ropsten',
  '4': 'rinkeby',
  '42': 'kovan',
  ganache: 'ganache'
};
exports.NETWORKS = NETWORKS;
var wsOptions = {
  timeout: 15000
};

var EthClient =
/*#__PURE__*/
function (_EventEmitter) {
  (0, _inheritsLoose2.default)(EthClient, _EventEmitter);

  function EthClient(provider, walletProvider, subscriptions) {
    var _this;

    _this = _EventEmitter.call(this) || this;
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_polling", false);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_networkName", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_networkID", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_web3Provider", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_subscriptions", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_walletProvider", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_requestCount", 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_contracts", {});
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_intervals", {});

    if (typeof provider === 'string') {
      var url = new URL(provider);

      if (url.protocol !== 'ws:' && url.protocol !== 'wss:') {
        throw new Error('rpc url must be a websocket endpoint');
      } // TODO: handle http endpoints


      _this._web3Provider = new _web3Providers.WebsocketProvider(provider, wsOptions);
    } else {
      _this._web3Provider = provider;
    }

    _this._subscriptions = subscriptions;
    _this._walletProvider = walletProvider;

    _this.setup();

    return _this;
  }

  var _proto = EthClient.prototype;

  _proto.setNetworkID = function setNetworkID(id) {
    if (id !== this._networkID) {
      if (Number(id) > 10000) {
        this._networkName = NETWORKS['ganache'];
      } else {
        this._networkName = NETWORKS[id] || 'Unknown network';
      }

      this._networkID = id;
      this.emit('networkChanged', id);
    }
  };

  _proto.setup =
  /*#__PURE__*/
  function () {
    var _setup = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee() {
      var _this2 = this;

      var sub, _sub;

      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.fetchNetwork();

              if (this._subscriptions) {
                _context.next = 3;
                break;
              }

              return _context.abrupt("return");

            case 3:
              if (!this._subscriptions.networkChanged) {
                _context.next = 8;
                break;
              }

              _context.next = 6;
              return this._subscriptions.networkChanged();

            case 6:
              sub = _context.sent;
              sub.subscribe(function (res) {
                _this2.setNetworkID(res.networkID);
              });

            case 8:
              if (!this._subscriptions.accountsChanged) {
                _context.next = 13;
                break;
              }

              _context.next = 11;
              return this._subscriptions.accountsChanged();

            case 11:
              _sub = _context.sent;

              _sub.subscribe(function (res) {
                _this2.emit('accountsChanged', res.accounts);
              });

            case 13:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function setup() {
      return _setup.apply(this, arguments);
    }

    return setup;
  }();

  _proto.fetchNetwork =
  /*#__PURE__*/
  function () {
    var _fetchNetwork = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee2() {
      var id;
      return _regenerator.default.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.send('net_version', []);

            case 2:
              id = _context2.sent;
              this.setNetworkID(id);
              return _context2.abrupt("return", id);

            case 5:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function fetchNetwork() {
      return _fetchNetwork.apply(this, arguments);
    }

    return fetchNetwork;
  }();

  _proto.getAccounts =
  /*#__PURE__*/
  function () {
    var _getAccounts = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee3() {
      return _regenerator.default.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              if (!(this._walletProvider != null)) {
                _context3.next = 2;
                break;
              }

              return _context3.abrupt("return", this._walletProvider.getAccounts());

            case 2:
              throw new Error('No wallet provider found');

            case 3:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function getAccounts() {
      return _getAccounts.apply(this, arguments);
    }

    return getAccounts;
  }();

  _proto.getETHBalance =
  /*#__PURE__*/
  function () {
    var _getETHBalance = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee4(address) {
      var res;
      return _regenerator.default.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return this.send('eth_getBalance', [address, 'latest']);

            case 2:
              res = _context4.sent;
              return _context4.abrupt("return", (0, _web3Utils.fromWei)(res, 'ether'));

            case 4:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function getETHBalance(_x) {
      return _getETHBalance.apply(this, arguments);
    }

    return getETHBalance;
  }();

  _proto.getContract = function getContract(abi, address) {
    if (this._contracts[address]) {
      return this._contracts[address];
    }

    var contract = new _BaseContract.default(this, abi, address);
    this._contracts[address] = contract;
    return contract;
  };

  _proto.erc20Contract = function erc20Contract(address) {
    if (this._contracts[address]) {
      return this._contracts[address];
    }

    var contract = new _ERC.default(this, address);
    this._contracts[address] = contract;
    return contract;
  } // Logs
  ;

  _proto.getPastEvents =
  /*#__PURE__*/
  function () {
    var _getPastEvents = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee5(params) {
      var res;
      return _regenerator.default.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              if (params.fromBlock != null) {
                params.fromBlock = (0, _web3Utils.toHex)(params.fromBlock);
              }

              if (params.toBlock != null) {
                params.toBlock = (0, _web3Utils.toHex)(params.toBlock);
              }

              _context5.next = 4;
              return this.send('eth_getLogs', [params]);

            case 4:
              res = _context5.sent;
              return _context5.abrupt("return", res);

            case 6:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }));

    function getPastEvents(_x2) {
      return _getPastEvents.apply(this, arguments);
    }

    return getPastEvents;
  }();

  _proto.decodeLog = function decodeLog(log, inputs) {
    return _web3EthAbi.default.decodeLog(inputs, log.data, log.topics);
  } // Subscriptions
  ;

  _proto.subscribe =
  /*#__PURE__*/
  function () {
    var _subscribe = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee6(method, params) {
      return _regenerator.default.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              if (this.web3Provider.subscribe) {
                _context6.next = 2;
                break;
              }

              throw new Error('subscriptions not supported');

            case 2:
              return _context6.abrupt("return", this.web3Provider.subscribe('eth_subscribe', method, params));

            case 3:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this);
    }));

    function subscribe(_x3, _x4) {
      return _subscribe.apply(this, arguments);
    }

    return subscribe;
  }();

  _proto.unsubscribe =
  /*#__PURE__*/
  function () {
    var _unsubscribe = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee7(id) {
      return _regenerator.default.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              if (this.web3Provider.unsubscribe) {
                _context7.next = 2;
                break;
              }

              throw new Error('subscriptions not supported');

            case 2:
              return _context7.abrupt("return", this.web3Provider.unsubscribe(id));

            case 3:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7, this);
    }));

    function unsubscribe(_x5) {
      return _unsubscribe.apply(this, arguments);
    }

    return unsubscribe;
  }();

  _proto.clearSubscriptions =
  /*#__PURE__*/
  function () {
    var _clearSubscriptions = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee8() {
      return _regenerator.default.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              if (this.web3Provider.clearSubscriptions) {
                _context8.next = 2;
                break;
              }

              throw new Error('subscriptions not supported');

            case 2:
              return _context8.abrupt("return", this.web3Provider.clearSubscriptions());

            case 3:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8, this);
    }));

    function clearSubscriptions() {
      return _clearSubscriptions.apply(this, arguments);
    }

    return clearSubscriptions;
  }() // Signing
  ;

  _proto.signData =
  /*#__PURE__*/
  function () {
    var _signData = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee9(params) {
      return _regenerator.default.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              if (!(this._walletProvider != null)) {
                _context9.next = 2;
                break;
              }

              return _context9.abrupt("return", this._walletProvider.sign(params));

            case 2:
              throw new Error('No wallet provider found');

            case 3:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9, this);
    }));

    function signData(_x6) {
      return _signData.apply(this, arguments);
    }

    return signData;
  }();

  _proto.signMessage =
  /*#__PURE__*/
  function () {
    var _signMessage = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee10(message, address) {
      var data;
      return _regenerator.default.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              data = (0, _web3Utils.toHex)(message);
              return _context10.abrupt("return", this.signData({
                address: address,
                data: data
              }));

            case 2:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10, this);
    }));

    function signMessage(_x7, _x8) {
      return _signMessage.apply(this, arguments);
    }

    return signMessage;
  }() // Sending transactions
  ;

  _proto.sendETH = function sendETH(params) {
    var valueWei = (0, _web3Utils.toWei)(String(params.value));
    var valueHex = (0, _web3Utils.toHex)(valueWei);
    var txParams = {
      to: params.to,
      from: params.from,
      value: valueHex
    };
    return this.sendAndListen(txParams, params.confirmations);
  };

  _proto.getConfirmations =
  /*#__PURE__*/
  function () {
    var _getConfirmations = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee11(txHash) {
      var res, latestBlock, txBlock;
      return _regenerator.default.wrap(function _callee11$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              _context11.next = 2;
              return this.send('eth_getTransactionReceipt', [txHash]);

            case 2:
              res = _context11.sent;

              if (res) {
                _context11.next = 5;
                break;
              }

              return _context11.abrupt("return", null);

            case 5:
              _context11.next = 7;
              return this.getLatestBlock();

            case 7:
              latestBlock = _context11.sent;
              txBlock = (0, _web3Utils.hexToNumber)(res.blockNumber);
              return _context11.abrupt("return", latestBlock - txBlock);

            case 10:
            case "end":
              return _context11.stop();
          }
        }
      }, _callee11, this);
    }));

    function getConfirmations(_x9) {
      return _getConfirmations.apply(this, arguments);
    }

    return getConfirmations;
  }();

  _proto.getLatestBlock =
  /*#__PURE__*/
  function () {
    var _getLatestBlock = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee12() {
      var blockRes;
      return _regenerator.default.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              _context12.next = 2;
              return this.send('eth_blockNumber', []);

            case 2:
              blockRes = _context12.sent;
              return _context12.abrupt("return", (0, _web3Utils.hexToNumber)(blockRes));

            case 4:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12, this);
    }));

    function getLatestBlock() {
      return _getLatestBlock.apply(this, arguments);
    }

    return getLatestBlock;
  }();

  _proto.confirmTransaction =
  /*#__PURE__*/
  function () {
    var _confirmTransaction = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee14(txHash, confirmationsRequired) {
      var _this3 = this;

      return _regenerator.default.wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              if (confirmationsRequired === void 0) {
                confirmationsRequired = 10;
              }

              return _context14.abrupt("return", new Promise(function (resolve, reject) {
                _this3._intervals[txHash] = setInterval(
                /*#__PURE__*/
                (0, _asyncToGenerator2.default)(
                /*#__PURE__*/
                _regenerator.default.mark(function _callee13() {
                  var confirmations;
                  return _regenerator.default.wrap(function _callee13$(_context13) {
                    while (1) {
                      switch (_context13.prev = _context13.next) {
                        case 0:
                          _context13.prev = 0;
                          _context13.next = 3;
                          return _this3.getConfirmations(txHash);

                        case 3:
                          confirmations = _context13.sent;

                          if (confirmations !== null && confirmations >= confirmationsRequired) {
                            clearInterval(_this3._intervals[txHash]);
                            _this3._intervals[txHash] = undefined;
                            resolve(true);
                          }

                          _context13.next = 10;
                          break;

                        case 7:
                          _context13.prev = 7;
                          _context13.t0 = _context13["catch"](0);
                          reject(_context13.t0);

                        case 10:
                        case "end":
                          return _context13.stop();
                      }
                    }
                  }, _callee13, null, [[0, 7]]);
                })), 2000);
              }));

            case 2:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee14);
    }));

    function confirmTransaction(_x10, _x11) {
      return _confirmTransaction.apply(this, arguments);
    }

    return confirmTransaction;
  }();

  _proto.estimateGas =
  /*#__PURE__*/
  function () {
    var _estimateGas = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee15(txParams) {
      var _ref2, gasLimit, blockGasLimitBN, maxGasBN, estGasHex, estGasBN, paddedGasBN;

      return _regenerator.default.wrap(function _callee15$(_context15) {
        while (1) {
          switch (_context15.prev = _context15.next) {
            case 0:
              _context15.next = 2;
              return this.send('eth_getBlockByNumber', ['latest', false]);

            case 2:
              _ref2 = _context15.sent;
              gasLimit = _ref2.gasLimit;
              // Get the block limit from previous block
              blockGasLimitBN = (0, _web3Utils.toBN)(gasLimit);
              maxGasBN = blockGasLimitBN.muln(0.9); // Get estimated tx limit

              _context15.next = 8;
              return this.send('eth_estimateGas', [txParams]);

            case 8:
              estGasHex = _context15.sent;
              estGasBN = (0, _web3Utils.toBN)(estGasHex); // Pad the estimated limit

              paddedGasBN = estGasBN.muln(1.5);

              if (!estGasBN.gt(maxGasBN)) {
                _context15.next = 13;
                break;
              }

              return _context15.abrupt("return", estGasHex);

            case 13:
              if (!paddedGasBN.lt(maxGasBN)) {
                _context15.next = 15;
                break;
              }

              return _context15.abrupt("return", (0, _web3Utils.numberToHex)(paddedGasBN));

            case 15:
              return _context15.abrupt("return", (0, _web3Utils.numberToHex)(maxGasBN));

            case 16:
            case "end":
              return _context15.stop();
          }
        }
      }, _callee15, this);
    }));

    function estimateGas(_x12) {
      return _estimateGas.apply(this, arguments);
    }

    return estimateGas;
  }();

  _proto.completeTxParams =
  /*#__PURE__*/
  function () {
    var _completeTxParams = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee16(txParams) {
      return _regenerator.default.wrap(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              if (txParams.from) {
                _context16.next = 2;
                break;
              }

              throw new Error('Transaction "from" address required');

            case 2:
              if (txParams.nonce) {
                _context16.next = 6;
                break;
              }

              _context16.next = 5;
              return this.send('eth_getTransactionCount', [txParams.from, 'pending']);

            case 5:
              txParams.nonce = _context16.sent;

            case 6:
              if (txParams.gas) {
                _context16.next = 20;
                break;
              }

              _context16.prev = 7;
              _context16.next = 10;
              return this.estimateGas(txParams);

            case 10:
              txParams.gas = _context16.sent;
              _context16.next = 20;
              break;

            case 13:
              _context16.prev = 13;
              _context16.t0 = _context16["catch"](7);

              if (!(_context16.t0.message === 'no contract code at given address')) {
                _context16.next = 19;
                break;
              }

              txParams.gas = '0xcf08';
              _context16.next = 20;
              break;

            case 19:
              throw _context16.t0;

            case 20:
              if (txParams.gasPrice) {
                _context16.next = 24;
                break;
              }

              _context16.next = 23;
              return this.send('eth_gasPrice', []);

            case 23:
              txParams.gasPrice = _context16.sent;

            case 24:
              return _context16.abrupt("return", txParams);

            case 25:
            case "end":
              return _context16.stop();
          }
        }
      }, _callee16, this, [[7, 13]]);
    }));

    function completeTxParams(_x13) {
      return _completeTxParams.apply(this, arguments);
    }

    return completeTxParams;
  }();

  _proto.prepareAndSignTx =
  /*#__PURE__*/
  function () {
    var _prepareAndSignTx = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee17(txParams) {
      var fullParams;
      return _regenerator.default.wrap(function _callee17$(_context17) {
        while (1) {
          switch (_context17.prev = _context17.next) {
            case 0:
              if (!(this._walletProvider != null)) {
                _context17.next = 6;
                break;
              }

              this.validateTransaction(txParams);
              _context17.next = 4;
              return this.completeTxParams(txParams);

            case 4:
              fullParams = _context17.sent;
              return _context17.abrupt("return", this._walletProvider.signTransaction(fullParams));

            case 6:
              throw new Error('No wallet provider found');

            case 7:
            case "end":
              return _context17.stop();
          }
        }
      }, _callee17, this);
    }));

    function prepareAndSignTx(_x14) {
      return _prepareAndSignTx.apply(this, arguments);
    }

    return prepareAndSignTx;
  }();

  _proto.validateTransaction = function validateTransaction(txParams) {
    if (txParams.to && !(0, _web3Utils.isAddress)(txParams.to)) {
      throw new Error('Invalid to address');
    }

    if (!txParams.from) {
      throw new Error('Missing sender address');
    }

    if (!(0, _web3Utils.isAddress)(txParams.from)) {
      throw new Error('Invalid sender address');
    }
  };

  _proto.generateTXRequest =
  /*#__PURE__*/
  function () {
    var _generateTXRequest = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee18(txParams) {
      var signedTx;
      return _regenerator.default.wrap(function _callee18$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              _context18.next = 2;
              return this.prepareAndSignTx(txParams);

            case 2:
              signedTx = _context18.sent;
              return _context18.abrupt("return", {
                method: 'eth_sendRawTransaction',
                params: [signedTx]
              });

            case 4:
            case "end":
              return _context18.stop();
          }
        }
      }, _callee18, this);
    }));

    function generateTXRequest(_x15) {
      return _generateTXRequest.apply(this, arguments);
    }

    return generateTXRequest;
  }();

  _proto.sendAndListen =
  /*#__PURE__*/
  function () {
    var _sendAndListen = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee19(txParams, confirmations) {
      var _this4 = this;

      var eventEmitter, request;
      return _regenerator.default.wrap(function _callee19$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              eventEmitter = new _events.default();
              _context19.next = 3;
              return this.generateTXRequest(txParams);

            case 3:
              request = _context19.sent;
              this.send(request.method, request.params).then(function (res) {
                eventEmitter.emit('hash', res);
                return _this4.confirmTransaction(res, 0).then(function () {
                  eventEmitter.emit('mined', res);

                  if (confirmations) {
                    return _this4.confirmTransaction(res, confirmations);
                  }
                });
              }).then(function (res) {
                eventEmitter.emit('confirmed', res);
              }).catch(function (err) {
                eventEmitter.emit('error', err);
              });
              return _context19.abrupt("return", eventEmitter);

            case 6:
            case "end":
              return _context19.stop();
          }
        }
      }, _callee19, this);
    }));

    function sendAndListen(_x16, _x17) {
      return _sendAndListen.apply(this, arguments);
    }

    return sendAndListen;
  }();

  _proto.send =
  /*#__PURE__*/
  function () {
    var _send = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee20(method, params) {
      return _regenerator.default.wrap(function _callee20$(_context20) {
        while (1) {
          switch (_context20.prev = _context20.next) {
            case 0:
              return _context20.abrupt("return", this.web3Provider.send(method, params));

            case 1:
            case "end":
              return _context20.stop();
          }
        }
      }, _callee20, this);
    }));

    function send(_x18, _x19) {
      return _send.apply(this, arguments);
    }

    return send;
  }();

  (0, _createClass2.default)(EthClient, [{
    key: "web3Provider",
    get: function get() {
      return this._web3Provider;
    }
  }, {
    key: "providerURL",
    set: function set(url) {
      // TODO: handle http
      if (this._web3Provider.clearSubscriptions) {
        this._web3Provider.clearSubscriptions();
      }

      this._web3Provider = new _web3Providers.WebsocketProvider(url, wsOptions);
      this.fetchNetwork();
    }
  }, {
    key: "networkName",
    get: function get() {
      return this._networkName || 'Awaiting network';
    }
  }, {
    key: "networkID",
    get: function get() {
      return this._networkID || '0';
    }
  }, {
    key: "walletProvider",
    get: function get() {
      return this._walletProvider;
    }
  }]);
  return EthClient;
}(_events.default);

exports.default = EthClient;