"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _web3EthAbi = _interopRequireDefault(require("../web3EthAbi"));

var Contract =
/*#__PURE__*/
function () {
  function Contract(ethClient, abi, address) {
    (0, _defineProperty2.default)(this, "_ethClient", void 0);
    (0, _defineProperty2.default)(this, "_abi", void 0);
    (0, _defineProperty2.default)(this, "_address", void 0);
    this._ethClient = ethClient;
    this._address = address;
    this._abi = abi;
  }

  var _proto = Contract.prototype;

  _proto.getFunctionABI = function getFunctionABI(name) {
    var abi = this.abi.find(function (a) {
      return a.name === name;
    });

    if (!abi) {
      throw new Error("\"" + name + "\" signature not found in ABI");
    }

    return abi;
  };

  _proto.encodeCall = function encodeCall(name, params) {
    var abi = this.getFunctionABI(name);
    return _web3EthAbi.default.encodeFunctionCall(abi, params || []);
  };

  _proto.decodeCallResult = function decodeCallResult(name, result) {
    var abi = this.getFunctionABI(name);

    if (!abi.outputs.length) {
      return result;
    }

    if (abi.outputs.length && !result) {
      throw new Error('Expected outputs but none returned');
    }

    if (abi.outputs.length > 1) {
      return _web3EthAbi.default.decodeParameters(abi.outputs, result);
    }

    return _web3EthAbi.default.decodeParameter(abi.outputs[0].type, result);
  };

  _proto.call =
  /*#__PURE__*/
  function () {
    var _call = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee(method, params) {
      var data, res;
      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              data = this.encodeCall(method, params);
              _context.next = 3;
              return this.ethClient.send('eth_call', [{
                data: data,
                to: this.address
              }, 'latest']);

            case 3:
              res = _context.sent;
              return _context.abrupt("return", this.decodeCallResult(method, res));

            case 5:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function call(_x, _x2) {
      return _call.apply(this, arguments);
    }

    return call;
  }();

  _proto.send =
  /*#__PURE__*/
  function () {
    var _send = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee2(method, params, options) {
      var data, txParams;
      return _regenerator.default.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              data = this.encodeCall(method, params);
              txParams = (0, _extends2.default)({}, options, {
                to: this.address,
                data: data
              });
              return _context2.abrupt("return", this.ethClient.sendAndListen(txParams));

            case 3:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function send(_x3, _x4, _x5) {
      return _send.apply(this, arguments);
    }

    return send;
  }();

  _proto.decodeEventLog = function decodeEventLog(eventName, log) {
    var abi = this.abi.find(function (abi) {
      return abi.type === 'event' && abi.name === eventName;
    });

    if (!abi) {
      throw new Error("Event '" + eventName + "' not found in ABI");
    }

    var inputs = [{
      indexed: true,
      name: 'signature',
      type: 'string'
    }].concat(abi.inputs);
    return this.ethClient.decodeLog(log, inputs);
  };

  _proto.subscribeToEvents =
  /*#__PURE__*/
  function () {
    var _subscribeToEvents = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee3(name, topics) {
      var abi, encodedSig, params;
      return _regenerator.default.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              if (this.ethClient.web3Provider.subscribe) {
                _context3.next = 2;
                break;
              }

              throw new Error('Subscriptions not supported');

            case 2:
              abi = this.abi.find(function (abi) {
                return abi.type === 'event' && abi.name === name;
              });

              if (abi) {
                _context3.next = 5;
                break;
              }

              throw new Error("Event '" + name + "' not found in ABI");

            case 5:
              encodedSig = _web3EthAbi.default.encodeEventSignature(abi);

              if (topics) {
                topics.unshift(encodedSig);
              } else {
                topics = [encodedSig];
              }

              params = [{
                address: this.address,
                topics: topics
              }];
              return _context3.abrupt("return", this.ethClient.subscribe('logs', params));

            case 9:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function subscribeToEvents(_x6, _x7) {
      return _subscribeToEvents.apply(this, arguments);
    }

    return subscribeToEvents;
  }();

  _proto.getPastEvents =
  /*#__PURE__*/
  function () {
    var _getPastEvents = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee4(name, params) {
      var abi, encodedSig, inputs, res, events;
      return _regenerator.default.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              abi = this.abi.find(function (abi) {
                return abi.type === 'event' && abi.name === name;
              });

              if (abi) {
                _context4.next = 3;
                break;
              }

              throw new Error("Event '" + name + "' not found in ABI");

            case 3:
              encodedSig = _web3EthAbi.default.encodeEventSignature(abi);
              inputs = [{
                indexed: true,
                name: 'signature',
                type: 'string'
              }].concat(abi.inputs);

              if (params.topics) {
                params.topics.unshift(encodedSig);
              } else {
                params.topics = [encodedSig];
              }

              params.address = this.address;
              _context4.next = 9;
              return this.ethClient.getPastEvents(params);

            case 9:
              res = _context4.sent;
              events = [];
              res.forEach(function (log) {
                try {
                  var event = _web3EthAbi.default.decodeLog(inputs, log.data, log.topics);

                  events.push(event);
                } catch (err) {
                  // eslint-disable-next-line no-console
                  console.warn('Error parsing event log: ', err);
                }
              });
              return _context4.abrupt("return", events);

            case 13:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function getPastEvents(_x8, _x9) {
      return _getPastEvents.apply(this, arguments);
    }

    return getPastEvents;
  }();

  (0, _createClass2.default)(Contract, [{
    key: "ethClient",
    get: function get() {
      return this._ethClient;
    }
  }, {
    key: "abi",
    get: function get() {
      return this._abi;
    }
  }, {
    key: "address",
    get: function get() {
      return this._address;
    }
  }]);
  return Contract;
}();

exports.default = Contract;