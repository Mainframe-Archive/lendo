"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.truncateAddress = exports.jsonRpcResponse = exports.decodeTransactionData = exports.unitMap = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _web3EthAbi = _interopRequireDefault(require("./web3EthAbi"));

var _METHOD_LABELS, _ERC;

var unitMap = {
  noether: '0',
  wei: '1',
  kwei: '1000',
  Kwei: '1000',
  babbage: '1000',
  femtoether: '1000',
  mwei: '1000000',
  Mwei: '1000000',
  lovelace: '1000000',
  picoether: '1000000',
  gwei: '1000000000',
  Gwei: '1000000000',
  shannon: '1000000000',
  nanoether: '1000000000',
  nano: '1000000000',
  szabo: '1000000000000',
  microether: '1000000000000',
  micro: '1000000000000',
  finney: '1000000000000000',
  milliether: '1000000000000000',
  milli: '1000000000000000',
  ether: '1000000000000000000',
  kether: '1000000000000000000000',
  grand: '1000000000000000000000',
  mether: '1000000000000000000000000',
  gether: '1000000000000000000000000000',
  tether: '1000000000000000000000000000000'
};
exports.unitMap = unitMap;
var TRANSFER_SIG = 'a9059cbb';
var APPROVE_SIG = '095ea7b3';
var TRANSFER_FROM_SIG = '23b872dd';
var METHOD_LABELS = (_METHOD_LABELS = {}, _METHOD_LABELS[TRANSFER_SIG] = 'Transfer', _METHOD_LABELS[APPROVE_SIG] = 'Approve', _METHOD_LABELS[TRANSFER_FROM_SIG] = 'Transfer From', _METHOD_LABELS);
var decodableContracts = {
  ERC20: (_ERC = {}, _ERC[TRANSFER_SIG] = [// Transfer
  {
    type: 'address',
    name: 'to'
  }, {
    type: 'uint256',
    name: 'amount'
  }], _ERC[APPROVE_SIG] = [// Approve
  {
    type: 'address',
    name: 'spender'
  }, {
    type: 'uint256',
    name: 'amount'
  }], _ERC[TRANSFER_FROM_SIG] = [// transferFrom
  {
    type: 'address',
    name: 'from'
  }, {
    type: 'address',
    name: 'to'
  }, {
    type: 'uint256',
    name: 'amount'
  }], _ERC)
};

var decodeTransactionData =
/*#__PURE__*/
function () {
  var _ref = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee(txData) {
    var methodSig, decodableContract, expectedParams, paramsData, params, paramKeys, cleanedParams;
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            methodSig = txData.slice(2, 10);
            decodableContract = Object.keys(decodableContracts).find(function (type) {
              return !!decodableContracts[type][methodSig];
            });

            if (decodableContract) {
              _context.next = 4;
              break;
            }

            throw new Error("No decodable method found for " + methodSig);

          case 4:
            expectedParams = decodableContracts[decodableContract][methodSig];
            paramsData = txData.slice(10, txData.length);
            params = _web3EthAbi.default.decodeParameters(expectedParams, paramsData);
            paramKeys = Object.keys(expectedParams).map(function (k) {
              return expectedParams[k].name;
            });
            cleanedParams = {};
            Object.keys(params).forEach(function (k) {
              if (paramKeys.includes(k)) {
                cleanedParams[k] = params[k];
              }
            });
            return _context.abrupt("return", {
              contractType: decodableContract,
              signatureHex: methodSig,
              signatureName: METHOD_LABELS[methodSig],
              params: cleanedParams
            });

          case 11:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function decodeTransactionData(_x) {
    return _ref.apply(this, arguments);
  };
}();

exports.decodeTransactionData = decodeTransactionData;

var jsonRpcResponse = function jsonRpcResponse(result, id) {
  return {
    result: result,
    id: id,
    jsonrpc: '2.0',
    error: null
  };
};

exports.jsonRpcResponse = jsonRpcResponse;

var truncateAddress = function truncateAddress(address, endChars) {
  if (endChars === void 0) {
    endChars = 8;
  }

  if (address.length < endChars * 2 + 3) {
    return address;
  }

  var start = address.substring(0, endChars);
  var end = address.substring(address.length - endChars, address.length);
  return start + '...' + end;
};

exports.truncateAddress = truncateAddress;